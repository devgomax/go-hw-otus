services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres_test
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:${POSTGRES_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 1s
      retries: 5

  migrations:
    image: kukymbr/goose-docker:3.24.2
    container_name: migrations_test
    restart: no
    # To be sure to run migrations only when postgres is ready to receive connections
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      GOOSE_DRIVER: postgres
      GOOSE_DBSTRING: host=postgres port=${POSTGRES_PORT} user=${POSTGRES_USER} password=${POSTGRES_PASSWORD} dbname=${POSTGRES_DB}
      GOOSE_VERBOSE: true
    volumes:
      - ../../migrations:/migrations


  rabbitmq:
    image: rabbitmq:4.1-management-alpine
    container_name: rabbitmq_test
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5673:${RABBITMQ_PORT}"
      - "15673:15672"
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  calendar:
    container_name: calendar_test
    build:
      context: ../../
      dockerfile: build/calendar/Dockerfile
    ports:
      - "8091:${GRPC_PORT}"
      - "8081:${HTTP_PORT}"
    depends_on:
      migrations:
        condition: service_completed_successfully
    restart: unless-stopped
    environment:
      PGHOST: postgres_test
      PGPORT: ${POSTGRES_PORT}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB}
      DATABASE_DB_TYPE: ${DATABASE_DB_TYPE}
      GRPC_PORT: ${GRPC_PORT}
      HTTP_PORT: ${HTTP_PORT}

  calendar_scheduler:
    container_name: scheduler_test
    build:
      context: ../../
      dockerfile: build/calendar_scheduler/Dockerfile
    depends_on:
      migrations:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    environment:
      PGHOST: postgres_test
      PGPORT: ${POSTGRES_PORT}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB}
      DATABASE_DB_TYPE: ${DATABASE_DB_TYPE}
      GRPC_PORT: ${GRPC_PORT}
      HTTP_PORT: ${HTTP_PORT}
      AMQP_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq_test:${RABBITMQ_PORT}/"


  calendar_sender:
    container_name: sender_test
    build:
      context: ../../
      dockerfile: build/calendar_sender/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    environment:
      AMQP_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq_test:${RABBITMQ_PORT}/"

volumes:
  postgres_data:
  rabbitmq_data:
